name: Deploy

on:
  push:
    branches:
      - "*"
      - "dependabot/**"
      - "!skipci*"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SLS_DEPRECATION_DISABLE: "*" # Turn off deprecation warnings in the pipeline
    steps:
      - name: set branch_name
        run: |
          if [[ "$GITHUB_REF" =~ ^refs/heads/dependabot/.* ]]; then # Dependabot builds very long branch names.  This is a switch to make it shorter.
            echo "branch_name=`echo ${GITHUB_REF#refs/heads/} | md5sum | head -c 10 | sed 's/^/x/'`" >> $GITHUB_ENV
          else
            echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v2
      - name: Validate branch name
        run: ./.github/branchNameValidation.sh $STAGE_PREFIX$branch_name
      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          CODE_CLIMATE_ID: ${{ secrets.CODE_CLIMATE_ID }}
      - name: lock this branch to prevent concurrent builds
        run: ./.github/github-lock.sh $branch_name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock', 'plugins/**') }}
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: run unit tests
        run: ./test-unit.sh
      - name: publish test coverage to code climate
        if: env.CODE_CLIMATE_ID != ''
        uses: paambaati/codeclimate-action@v2.7.5
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_ID }}
        with:
          coverageLocations: |
            ${{github.workspace}}/services/app-api/coverage/lcov.info:lcov
            ${{github.workspace}}/services/ui-src/coverage/lcov.info:lcov
      - name: Store unit test reults
        uses: actions/upload-artifact@v2
        with:
          name: unit_test_results
          path: ${{github.workspace}}/services/ui-src/coverage/lcov.info
      - name: deploy
        run: |
          # When deploying multiple copies of this quickstart to the same AWS Account (not ideal), a prefix helps prevent stepping on each other.
          # This can optionally be set as an GitHub Actions Secret
          ./deploy.sh $STAGE_PREFIX$branch_name

  setup-ch-tests:
    name: Init Child
    needs: deploy
    if: ${{ github.ref != 'refs/heads/prod' && github.ref != 'refs/heads/val' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers: [create_delete_child.spec.js]
    steps:
      - name: set branch_name
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - uses: actions/checkout@v1
      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          INFRASTRUCTURE_TYPE: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_INFRASTRUCTURE_TYPE] || secrets.INFRASTRUCTURE_TYPE || 'development' }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
          COGNITO_TEST_USERS_PASSWORD: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_COGNITO_TEST_USERS_PASSWORD] || secrets.COGNITO_TEST_USERS_PASSWORD }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Combine yarn.lock files to single file
        run: find services -maxdepth 3 -name yarn.lock | xargs cat yarn.lock > combined-yarn.txt
      - name: cache service dependencies
        uses: actions/cache@v2
        with:
          path: |
            services/app-api/node_modules
            services/uploads/node_modules
            services/stream-functions/node_modules
            services/ui/node_modules
            services/ui-auth/node_modules
            services/ui-src/node_modules
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('combined-yarn.txt') }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: Endpoint
        run: |
          pushd services
          export APPLICATION_ENDPOINT=`./output.sh ui ApplicationEndpointUrl $STAGE_PREFIX$branch_name`
          echo "APPLICATION_ENDPOINT=$APPLICATION_ENDPOINT" >> $GITHUB_ENV
          echo "Application endpoint: $APPLICATION_ENDPOINT"
          popd
      - name: Run Cypress Tests
        uses: cypress-io/github-action@v2.11.7
        with:
          working-directory: tests/cypress
          spec: cypress/integration/features/${{ matrix.containers }}
          browser: chrome
          headless: true
          config: baseUrl=${{ env.APPLICATION_ENDPOINT }}
          wait-on: ${{ env.APPLICATION_ENDPOINT }}
          env: true
        env:
          CYPRESS_TEST_USER_1: ${{ secrets.CYPRESS_TEST_USER_1 }}
          CYPRESS_TEST_USER_2: ${{ secrets.CYPRESS_TEST_USER_2 }}
          CYPRESS_TEST_USER_3: ${{ secrets.CYPRESS_TEST_USER_3 }}
          CYPRESS_TEST_PASSWORD_1: ${{ secrets.CYPRESS_TEST_PASSWORD_1 }}
      - name: Upload screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: tests/cypress/screenshots/

      - name: Slack Notification
        if: env.SLACK_WEBHOOK_URL != '' && contains(fromJson('["master", "val", "prod"]'), env.branch_name) && failure ()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,ref # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  test-adult-measures:
    name: Test Adult Measures
    needs: deploy
    if: ${{ github.ref != 'refs/heads/prod' && github.ref != 'refs/heads/val' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers: [
            ADDCH.spec.js,
            AMMAD.spec.js,
            AMRAD.spec.js,
            BCSAD.spec.js,
            CBPAD.spec.js,
            CCPAD.spec.js,
            CCSAD.spec.js,
            CCWAD.spec.js,
            CDFAD.spec.js,
            CHLAD.spec.js,
            COBAD.spec.js,
            CPAAD.spec.js,
            DEVCH.spec.js,
            FUAAD.spec.js,
            FUHAD.spec.js,
            FUMAD.spec.js,
            FVAAD.spec.js,
            HPCAD.spec.js,
            HPCMIAD.spec.js,
            HVLAD.spec.js,
            MSCAD.spec.js,
            # NCIDDSAD.spec.js,
            OHDAD.spec.js,
            OUDAD.spec.js,
            PC01AD.spec.js,
            PCRAD.spec.js,
            PPCAD.spec.js,
            # PQI01AD.spec.js,
            PQI05AD.spec.js,
            PQI08AD.spec.js,
            PQI15AD.spec.js,
            QUALIFIERS_adult.spec.feature,
            SAAAD.spec.js,
            SSDAD.spec.js,
          ]
    steps:
      - name: set branch_name
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - uses: actions/checkout@v1
      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          INFRASTRUCTURE_TYPE: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_INFRASTRUCTURE_TYPE] || secrets.INFRASTRUCTURE_TYPE || 'development' }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
          COGNITO_TEST_USERS_PASSWORD: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_COGNITO_TEST_USERS_PASSWORD] || secrets.COGNITO_TEST_USERS_PASSWORD }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Combine yarn.lock files to single file
        run: find services -maxdepth 3 -name yarn.lock | xargs cat yarn.lock > combined-yarn.txt
      - name: cache service dependencies
        uses: actions/cache@v2
        with:
          path: |
            services/app-api/node_modules
            services/uploads/node_modules
            services/stream-functions/node_modules
            services/ui/node_modules
            services/ui-auth/node_modules
            services/ui-src/node_modules
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('combined-yarn.txt') }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: Endpoint
        run: |
          pushd services
          export APPLICATION_ENDPOINT=`./output.sh ui ApplicationEndpointUrl $STAGE_PREFIX$branch_name`
          echo "APPLICATION_ENDPOINT=$APPLICATION_ENDPOINT" >> $GITHUB_ENV
          echo "Application endpoint: $APPLICATION_ENDPOINT"
          popd
      - name: Run Cypress Tests
        uses: cypress-io/github-action@v2.11.7
        with:
          record: false
          working-directory: tests/cypress
          spec: cypress/integration/measures/${{ matrix.containers }}
          browser: chrome
          headless: true
          config: baseUrl=${{ env.APPLICATION_ENDPOINT }}
          wait-on: ${{ env.APPLICATION_ENDPOINT }}
          env: true
        env:
          CYPRESS_TEST_USER_1: ${{ secrets.CYPRESS_TEST_USER_1 }}
          CYPRESS_TEST_USER_2: ${{ secrets.CYPRESS_TEST_USER_2 }}
          CYPRESS_TEST_USER_3: ${{ secrets.CYPRESS_TEST_USER_3 }}
          CYPRESS_TEST_PASSWORD_1: ${{ secrets.CYPRESS_TEST_PASSWORD_1 }}
      - name: Upload screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: tests/cypress/screenshots/

      - name: Slack Notification
        if: env.SLACK_WEBHOOK_URL != '' && contains(fromJson('["master", "val", "prod"]'), env.branch_name) && failure ()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,ref # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  test-child-measures:
    name: Test Child Measures
    needs: setup-ch-tests
    if: ${{ github.ref != 'refs/heads/prod' && github.ref != 'refs/heads/val' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers:
          [
            AMRCH.spec.js,
            AUDCH.spec.js,
            CCPCH.spec.js,
            CCWCH.spec.js,
            CDFCH.spec.js,
            CISCH.spec.js,
            CPCCH.spec.js,
            FUHCH.spec.js,
            QUALIFIERS_child.spec.js,
            CHLCH.spec.js,
            W30CH.spec.ts,
          ]
    steps:
      - name: set branch_name
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - uses: actions/checkout@v1
      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          INFRASTRUCTURE_TYPE: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_INFRASTRUCTURE_TYPE] || secrets.INFRASTRUCTURE_TYPE || 'development' }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
          COGNITO_TEST_USERS_PASSWORD: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_COGNITO_TEST_USERS_PASSWORD] || secrets.COGNITO_TEST_USERS_PASSWORD }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Combine yarn.lock files to single file
        run: find services -maxdepth 3 -name yarn.lock | xargs cat yarn.lock > combined-yarn.txt
      - name: cache service dependencies
        uses: actions/cache@v2
        with:
          path: |
            services/app-api/node_modules
            services/uploads/node_modules
            services/stream-functions/node_modules
            services/ui/node_modules
            services/ui-auth/node_modules
            services/ui-src/node_modules
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('combined-yarn.txt') }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: Endpoint
        run: |
          pushd services
          export APPLICATION_ENDPOINT=`./output.sh ui ApplicationEndpointUrl $STAGE_PREFIX$branch_name`
          echo "APPLICATION_ENDPOINT=$APPLICATION_ENDPOINT" >> $GITHUB_ENV
          echo "Application endpoint: $APPLICATION_ENDPOINT"
          popd
      - name: Run Cypress Tests
        uses: cypress-io/github-action@v2.11.7
        with:
          record: false
          working-directory: tests/cypress
          spec: cypress/integration/measures/${{ matrix.containers }}
          browser: chrome
          headless: true
          config: baseUrl=${{ env.APPLICATION_ENDPOINT }}
          wait-on: ${{ env.APPLICATION_ENDPOINT }}
          env: true
        env:
          CYPRESS_TEST_USER_1: ${{ secrets.CYPRESS_TEST_USER_1 }}
          CYPRESS_TEST_USER_2: ${{ secrets.CYPRESS_TEST_USER_2 }}
          CYPRESS_TEST_USER_3: ${{ secrets.CYPRESS_TEST_USER_3 }}
          CYPRESS_TEST_PASSWORD_1: ${{ secrets.CYPRESS_TEST_PASSWORD_1 }}
      - name: Upload screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: tests/cypress/screenshots/

      - name: Slack Notification
        if: env.SLACK_WEBHOOK_URL != '' && contains(fromJson('["master", "val", "prod"]'), env.branch_name) && failure ()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,ref # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  test-features:
    name: Test Features
    needs: test-adult-measures
    if: ${{ github.ref != 'refs/heads/prod' && github.ref != 'refs/heads/val'}}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers:
          [
            add_validation_to_rate_when_user_selects_multiple_Data_Sources.spec.js,
            adding_link_to_combined_rates_component.spec.js,
            data_source_rate_to_auto_calculate_in_OPM.spec.js,
            combined_rates_validation_warnings.spec.js,
            date_range_adjustment.spec.js,
            FAQ.spec.js,
            logo.spec.feature,
            measure_validation_error_creation_updates.spec.feature,
            NDR_validation_updates.spec.js,
            reporting_in_FY21_tag_for_alt_data_sources.spec.js,
            restructuring_data_source_text_boxes.spec.js,
            update_user_auth_handling_in_ui.spec.feature,
          ]
    steps:
      - name: set branch_name
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - uses: actions/checkout@v1
      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          INFRASTRUCTURE_TYPE: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_INFRASTRUCTURE_TYPE] || secrets.INFRASTRUCTURE_TYPE || 'development' }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
          COGNITO_TEST_USERS_PASSWORD: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_COGNITO_TEST_USERS_PASSWORD] || secrets.COGNITO_TEST_USERS_PASSWORD }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Combine yarn.lock files to single file
        run: find services -maxdepth 3 -name yarn.lock | xargs cat yarn.lock > combined-yarn.txt
      - name: cache service dependencies
        uses: actions/cache@v2
        with:
          path: |
            services/app-api/node_modules
            services/uploads/node_modules
            services/stream-functions/node_modules
            services/ui/node_modules
            services/ui-auth/node_modules
            services/ui-src/node_modules
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('combined-yarn.txt') }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: Endpoint
        run: |
          pushd services
          export APPLICATION_ENDPOINT=`./output.sh ui ApplicationEndpointUrl $STAGE_PREFIX$branch_name`
          echo "APPLICATION_ENDPOINT=$APPLICATION_ENDPOINT" >> $GITHUB_ENV
          echo "Application endpoint: $APPLICATION_ENDPOINT"
          popd
      - name: Run Cypress Tests
        uses: cypress-io/github-action@v2.11.7
        with:
          record: false
          working-directory: tests/cypress
          spec: cypress/integration/features/${{ matrix.containers }}
          browser: chrome
          headless: true
          config: baseUrl=${{ env.APPLICATION_ENDPOINT }}
          wait-on: ${{ env.APPLICATION_ENDPOINT }}
          env: true
        env:
          CYPRESS_TEST_USER_1: ${{ secrets.CYPRESS_TEST_USER_1 }}
          CYPRESS_TEST_USER_2: ${{ secrets.CYPRESS_TEST_USER_2 }}
          CYPRESS_TEST_USER_3: ${{ secrets.CYPRESS_TEST_USER_3 }}
          CYPRESS_TEST_PASSWORD_1: ${{ secrets.CYPRESS_TEST_PASSWORD_1 }}
      - name: Upload screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: tests/cypress/screenshots/

      - name: Slack Notification
        if: env.SLACK_WEBHOOK_URL != '' && contains(fromJson('["master", "val", "prod"]'), env.branch_name) && failure ()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,ref # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  a11y-tests:
    name: Test Ally
    needs: [test-adult-measures, test-child-measures]
    if: ${{ github.ref != 'refs/heads/prod' && github.ref != 'refs/heads/val' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers: [
            ammadPage,
            # amradPage,
            # bcsadPage,
            # cbpadPage,
            # ccpadPage,
            # ccsadPage,
            # ccwadPage,
            # cdfadPage,
            # chladPage,
            # cobadPage,
            # commonPages,
            # cpaadPage,
            # faqPage,
            # fuadPage,
            # fuhadPage,
            # fumadPage,
            # fvaadPage,
            # hpcadPage,
            # hpcmiadPage,
            # hvladPage,
            # ietadPage,
            # mscadPage,
            # nciddsPage,
            # ohdadPage,
            # oudadPage,
            # pc01adPage,
            # pcradPage,
            # ppcadPage,
            # pqi01adPage,
            # pqi05adPage,
            # pqi08adPage,
            # pqi15adPage,
            # ssaadPage,
            # ssdadPage,
          ]
    steps:
      - name: set branch_name
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - uses: actions/checkout@v1
      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          INFRASTRUCTURE_TYPE: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_INFRASTRUCTURE_TYPE] || secrets.INFRASTRUCTURE_TYPE || 'development' }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
          COGNITO_TEST_USERS_PASSWORD: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_COGNITO_TEST_USERS_PASSWORD] || secrets.COGNITO_TEST_USERS_PASSWORD }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Combine yarn.lock files to single file
        run: find services -maxdepth 3 -name yarn.lock | xargs cat yarn.lock > combined-yarn.txt
      - name: cache service dependencies
        uses: actions/cache@v2
        with:
          path: |
            services/app-api/node_modules
            services/uploads/node_modules
            services/stream-functions/node_modules
            services/ui/node_modules
            services/ui-auth/node_modules
            services/ui-src/node_modules
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('combined-yarn.txt') }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: Endpoint
        run: |
          pushd services
          export APPLICATION_ENDPOINT=`./output.sh ui ApplicationEndpointUrl $STAGE_PREFIX$branch_name`
          echo "APPLICATION_ENDPOINT=$APPLICATION_ENDPOINT" >> $GITHUB_ENV
          echo "Application endpoint: $APPLICATION_ENDPOINT"
          popd
      - name: Check Project A11y
        uses: cypress-io/github-action@v2.11.7
        with:
          working-directory: tests/cypress
          spec: cypress/integration/a11y/${{ matrix.containers }}.spec.js
          browser: chrome
          headless: true
          config: baseUrl=${{ env.APPLICATION_ENDPOINT }}
          wait-on: ${{ env.APPLICATION_ENDPOINT }}
          env: true
        env:
          CYPRESS_TEST_USER_1: ${{ secrets.CYPRESS_TEST_USER_1 }}
          CYPRESS_TEST_USER_2: ${{ secrets.CYPRESS_TEST_USER_2 }}
          CYPRESS_TEST_USER_3: ${{ secrets.CYPRESS_TEST_USER_3 }}
          CYPRESS_TEST_PASSWORD_1: ${{ secrets.CYPRESS_TEST_PASSWORD_1 }}
