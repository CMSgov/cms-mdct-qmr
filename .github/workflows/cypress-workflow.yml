name: Cypress Tests
on:
  workflow_call:
    inputs:
      test-path:
        description: "Path to the test files"
        required: true
        type: string
      test-endpoint:
        description: "Endpoint to run tests against"
        required: true
        type: string
    secrets:
      slack-url:
        description: "Slack Webhook URL"
        required: true
      cypress-user1:
        description: "Cypress User 1"
        required: true
      cypress-user2:
        description: "Cypress User 2"
        required: true
      cypress-user3:
        description: "Cypress User 3"
        required: true
      cypress-user4:
        description: "Cypress User 4"
        required: true
      cypress-password:
        description: "Cypress Password"
        required: true
      AWS_DEFAULT_REGION:
        description: "DEFAULT REGION"
        required: true
      AWS_OIDC_ROLE_TO_ASSUME:
        description: "AWS OIDC ROLE TO ASSUME"
        required: true

jobs:
  setup:
    name: Setup Cypress Test Matrix
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: set-test-matrix
        run: |
          echo "test-matrix=$(ls -1 tests/cypress/cypress/e2e/${{ inputs.test-path }}/* | xargs -n 1 basename | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
      - name: Get Cypress Test Matrix Runner IP
        id: get-test-matrix-ip
        run: |
          #!/bin/bash
          # Get the IP address of the runner
          IP_ADDRESS=$(curl https://api.ipify.org)
          echo "Cypres Test Matrix Runner IP address: $IP_ADDRESS"
    outputs:
      test-matrix: ${{ steps.set-test-matrix.outputs.test-matrix}}
  e2e-tests:
    name: Execute Cypress Tests
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node16.16.0-chrome107-ff107
      options: --user root
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        containers: ${{ fromJson(needs.setup.outputs.test-matrix) }}
    steps:
      - uses: actions/checkout@v3
      # - uses: actions/checkout@v4
      # - uses: actions/setup-python@v5
      #   with:
      #     python-version: '3.10' 
      # - run: python my_script.py 
      #
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: I'm still not a real boy :(
        run: |
          echo $(whoami)
      - name: Install Unzip
        run: |
          apt-get update
          apt-get install unzip
     - name: install python
       run: |
         curl https://www.python.org/ftp/python/3.10.13/Python-3.10.13.tgz
         tar -xvf Python-3.10.13.tar
         cd Python-3.10.13
         ./configure --prefix=$HOME/python
         make
         make install
     - name: check python install
       run: |
         python --version
     - name: install-aws-cli
       run: |
         curl -o awscli.tar.gz https://awscli.amazonaws.com/awscli.tar.gz
         $ tar -xzf awscli.tar.gz
         ls -alh
         ./configure --prefix=$HOME/.local
      - name: Verify installation
        run: aws --version
      - name: Configure AWS credentials for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Get Execute Cypress Runner IP
        id: get-execute-cypress-ip
        run: |
          #!/bin/bash
          # Get the IP address of the runner
          IP_ADDRESS=$(curl https://api.ipify.org)
          echo "Execute Cypress Runner IP address: $IP_ADDRESS"
          # Store the IP address as an output variable
          echo "RUNNER_IP=$IP_ADDRESS/32" >> $GITHUB_OUTPUT
      - name: Fetch AWS IP set ARNs
        id: fetch-ip-set-info
        run: |
          #!/bin/bash
          # Fetch AWS IP set ARNs using AWS CLI and store them in a variable
          AWS_IP_SET_INFO=$(aws wafv2 list-ip-sets --scope=CLOUDFRONT)
          # Store the IP set ARNs in an output variable using GITHUB_OUTPUT
          #echo "GITHUB_OUTPUT::aws_ip_set_arns=$AWS_IP_SET_ARNS"
          #Get Values from the IP SET
          IPSET_ARN=$(echo "$AWS_IP_SET_INFO" | jq -r '.IPSets[0].ARN')
          IPSET_NAME=$(echo "$AWS_IP_SET_INFO" | jq -r '.IPSets[0].Name')
          IPSET_ID=$(echo "$AWS_IP_SET_INFO" | jq -r '.IPSets[0].Id')
          IPSET_LOCK_TOKEN=$(echo "$AWS_IP_SET_INFO" | jq -r '.IPSets[0].LockToken')
          echo "Extracted ARN: $ARN"
          echo "IPSET_ARN=$IPSET_ARN" >> $GITHUB_OUTPUT
          echo "IPSET_NAME=$IPSET_NAME" >> $GITHUB_OUTPUT
          echo "IPSET_ID=$IPSET_ID" >> $GITHUB_OUTPUT
          echo "IPSET_LOCK_TOKEN=$IPSET_LOCK_TOKEN" >> $GITHUB_OUTPUT
      - name: Update IP Set
        id: update-ip-set
        run: |
          newip=${{ steps.get-execute-cypress-ip.RUNNER_IP }}
          oldarr=($(aws wafv2 get-ip-set --scope CLOUDFRONT --id ${{ steps.fetch-ip-set-info.outputs.IPSET_ID }} --name ${{ steps.fetch-ip-set-info.outputs.IPSET_NAME }} | jq -r '.IPSet.Addresses | .[]'))
          newarr=()
          for item in "${oldarr[@]}"; do
            newarr+=("$item")
          done
          newarr+=("$newip")
          addresses=$(IFS=" " ; echo "${newarr[*]}")
          echo "Updated IP addresses: $addresses"
          aws wafv2 update-ip-set --name ${{ steps.fetch-ip-set-info.outputs.IPSET_NAME }} --scope CLOUDFRONT --id ${{ steps.fetch-ip-set-info.outputs.IPSET_ID }} --lock-token ${{ steps.fetch-ip-set-info.outputs.IPSET_LOCK_TOKEN }} --addresses $addresses
      - name: Run Cypress Tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: tests/cypress
          spec: cypress/e2e/${{ inputs.test-path }}/${{ matrix.containers }}
          browser: chrome
          config: baseUrl=${{ inputs.test-endpoint }}
          env: true
        env:
          CYPRESS_TEST_USER_1: ${{ secrets.cypress-user1 }}
          CYPRESS_TEST_USER_2: ${{ secrets.cypress-user2 }}
          CYPRESS_TEST_USER_3: ${{ secrets.cypress-user3 }}
          CYPRESS_TEST_USER_4: ${{ secrets.cypress-user4 }}
          CYPRESS_TEST_PASSWORD_1: ${{ secrets.cypress-password }}
      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: tests/cypress/screenshots/
