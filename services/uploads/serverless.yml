# Refer to the README.md file in within this service directory to configure all ssm parameters required for this service.
service: uploads

frameworkVersion: "3"

plugins:
  - serverless-plugin-scripts
  - serverless-s3-local
  - serverless-stack-termination-protection
  - serverless-iam-helper
  - serverless-s3-bucket-helper

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - s3:GetObject
            - s3:GetObjectTagging
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:PutObjectTagging
            - s3:PutObjectVersionTagging
            - s3:DeleteObject
            - s3:ListBucket
          Resource: "*"

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
  coreSetTableName: ${env:coreSetTableName, cf:database-${self:custom.stage}.CoreSetTableName}
  coreSetTableArn: ${env:DYNAMO_TABLE_ARN, cf:database-${self:custom.stage}.CoreSetTableArn}
  measureTableName: ${env:measureTableName, cf:database-${self:custom.stage}.MeasureTableName}
  measureTableArn: ${env:DYNAMO_TABLE_ARN, cf:database-${self:custom.stage}.MeasureTableArn}
  serverlessTerminationProtection:
    stages:
      - master
      - val
      - prod
  scripts:
    hooks:
      # This script is run locally when running 'serverless deploy'
      package:initialize: |
        set -e
        curl -L --output lambda_layer.zip https://github.com/CMSgov/lambda-clamav-layer/releases/download/0.7/lambda_layer.zip
      deploy:finalize: |
        rm lambda_layer.zip
        serverless invoke --stage ${self:custom.stage} --function avDownloadDefinitions -t Event
  s3:
    directory: ./local_buckets
    cors: ./local_cors.xml
    buckets:
      - local-uploads # This is a little silly, but I've spent enough time on it.
        # the serverless-s3-local plugin starts any bucket with a BucketName
        # the attachments bucket has no name, so we need to make one up on our own
layers:
  clamDefs:
    package:
      artifact: lambda_layer.zip
functions:
  dynamoSync:
    handler: src/dynamoSync/handler.syncDynamoToS3
    memorySize: 4096
    timeout: 120
    events:
      - schedule: cron(30 * * * ? *)
    environment:
      coreSetTableName: ${self:custom.coreSetTableName}
      measureTableName: ${self:custom.measureTableName}
      dynamoSnapshotS3BucketName: !Ref DynamoSnapshotBucket
  avScan:
    handler: src/antivirus.lambdaHandleEvent
    name: ${self:service}-${self:custom.stage}-avScan
    timeout: 300 # 300 seconds = 5 minutes. Average scan is 25 seconds.
    memorySize: 3008
    layers:
      - !Ref ClamDefsLambdaLayer
    environment:
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: "lambda/s3-antivirus/av-definitions"
  avDownloadDefinitions:
    handler: src/download-definitions.lambdaHandleEvent
    events:
      - schedule: cron(15 1 * * ? *)
    timeout: 300 # 300 seconds = 5 minutes
    memorySize: 3072
    layers:
      - !Ref ClamDefsLambdaLayer
    environment:
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: "lambda/s3-antivirus/av-definitions"

resources:
  Resources:
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: aws:kms
                KMSMasterKeyID: !GetAtt BucketEncryptionKMSKey.Arn
        BucketName: !Sub ${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}
        CorsConfiguration: # Set the CORS policy
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
              ExposedHeaders:
                - ETag
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: !GetAtt AvScanLambdaFunction.Arn
      DependsOn: LambdaInvokePermission
    AVBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ClamDefsBucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:PutObject"
              Effect: "Allow"
              Resource: !Sub ${ClamDefsBucket.Arn}/*
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
            - Action:
                - "s3:GetBucketLocation"
                - "s3:ListBucket"
              Effect: "Allow"
              Resource: !Sub ${ClamDefsBucket.Arn}
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Resource: !Sub ${ClamDefsBucket.Arn}/*
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
            - Sid: "AllowSSLRequestsOnly"
              Effect: Deny
              Action: "s3:*"
              Principal: "*"
              Resource:
                - !Sub arn:aws:s3:::${ClamDefsBucket}/*
                - !Sub arn:aws:s3:::${ClamDefsBucket}
              Condition:
                Bool:
                  "aws:SecureTransport": false
    AttachmentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetBucketLocation"
                - "s3:ListBucket"
              Effect: "Allow"
              Resource: !Sub ${AttachmentsBucket.Arn}
              Principal:
                AWS: ${ssm:/configuration/mpriamrole}
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Resource: !Sub ${AttachmentsBucket.Arn}/*
              Principal:
                AWS: ${ssm:/configuration/mpriamrole}
            - Action:
                - "s3:GetBucketLocation"
                - "s3:ListBucket"
              Effect: "Allow"
              Resource: !Sub ${AttachmentsBucket.Arn}
              Principal:
                AWS: ${ssm:/configuration/mprdeviam}
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Resource: !Sub ${AttachmentsBucket.Arn}/*
              Principal:
                AWS: ${ssm:/configuration/mprdeviam}
            - Action:
                - "s3:PutObject"
              Effect: "Allow"
              Resource: !Sub ${AttachmentsBucket.Arn}/*
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
            - Action:
                - "s3:GetBucketLocation"
                - "s3:ListBucket"
              Effect: "Allow"
              Resource: !Sub ${AttachmentsBucket.Arn}
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
            - Sid: "AllowSSLRequestsOnly"
              Effect: Deny
              Action: "s3:*"
              Principal: "*"
              Resource:
                - !Sub arn:aws:s3:::${AttachmentsBucket}/*
                - !Sub arn:aws:s3:::${AttachmentsBucket}
              Condition:
                Bool:
                  "aws:SecureTransport": false
            - Action:
                - "s3:GetObject"
              Effect: "Deny"
              Resource: !Sub ${AttachmentsBucket.Arn}/public/*
              NotPrincipal:
                AWS: !GetAtt BucketAVScanRole.Arn
              Condition:
                StringNotEquals:
                  s3:ExistingObjectTag/virusScanStatus:
                    - "CLEAN"
                    - "PENDING"
                  aws:PrincipalArn: !GetAtt IamRoleLambdaExecution.Arn
            - Action:
                - "s3:DeleteObject"
              Effect: "Allow"
              Resource: !Sub ${AttachmentsBucket.Arn}/public/*
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
            - Action: "s3:PutObject"
              Effect: Deny
              Principal: "*"
              NotResource:
                - !Sub ${AttachmentsBucket.Arn}/*.jpg
                - !Sub ${AttachmentsBucket.Arn}/*.png
                - !Sub ${AttachmentsBucket.Arn}/*.gif
                - !Sub ${AttachmentsBucket.Arn}/*.jpeg
                - !Sub ${AttachmentsBucket.Arn}/*.bmp
                - !Sub ${AttachmentsBucket.Arn}/*.csv
                - !Sub ${AttachmentsBucket.Arn}/*.doc
                - !Sub ${AttachmentsBucket.Arn}/*.docx
                - !Sub ${AttachmentsBucket.Arn}/*.odp
                - !Sub ${AttachmentsBucket.Arn}/*.ods
                - !Sub ${AttachmentsBucket.Arn}/*.odt
                - !Sub ${AttachmentsBucket.Arn}/*.pdf
                - !Sub ${AttachmentsBucket.Arn}/*.ppt
                - !Sub ${AttachmentsBucket.Arn}/*.pptx
                - !Sub ${AttachmentsBucket.Arn}/*.rtf
                - !Sub ${AttachmentsBucket.Arn}/*.tif
                - !Sub ${AttachmentsBucket.Arn}/*.tiff
                - !Sub ${AttachmentsBucket.Arn}/*.txt
                - !Sub ${AttachmentsBucket.Arn}/*.xls
                - !Sub ${AttachmentsBucket.Arn}/*.xlsx
                - !Sub ${AttachmentsBucket.Arn}/*.json
    BucketEncryptionKMSKey:
      Type: "AWS::KMS::Key"
      Properties:
        Description: "Key for encrypting dynamo snapshots and upload buckets"
        EnableKeyRotation: true
        PendingWindowInDays: 10
        MultiRegion: true
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
              Action: "kms:*"
              Resource: "*"
            - Effect: Allow
              Principal:
                AWS: ${ssm:/configuration/mpriamrole}
              Action: "kms:*"
              Resource: "*"
            - Effect: Allow
              Principal:
                AWS: ${ssm:/configuration/mprdeviam}
              Action: "kms:*"
              Resource: "*"
            - Effect: Allow
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
              Action: "kms:*"
              Resource: "*"
    DynamoSnapshotBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: aws:kms
                KMSMasterKeyID: !GetAtt BucketEncryptionKMSKey.Arn
        BucketName: !Sub ${self:service}-${self:custom.stage}-dynamosnapshots-${AWS::AccountId}
    DynamoSnapshotBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref DynamoSnapshotBucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetBucketLocation"
                - "s3:ListBucket"
              Effect: "Allow"
              Resource: !Sub ${DynamoSnapshotBucket.Arn}
              Principal:
                AWS: ${ssm:/configuration/mpriamrole}
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Resource: !Sub ${DynamoSnapshotBucket.Arn}/*
              Principal:
                AWS: ${ssm:/configuration/mpriamrole}
            - Action:
                - "s3:GetBucketLocation"
                - "s3:ListBucket"
              Effect: "Allow"
              Resource: !Sub ${DynamoSnapshotBucket.Arn}
              Principal:
                AWS: ${ssm:/configuration/mprdeviam}
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Resource: !Sub ${DynamoSnapshotBucket.Arn}/*
              Principal:
                AWS: ${ssm:/configuration/mprdeviam}
            - Action:
                - "s3:PutObject"
              Effect: "Allow"
              Resource: !Sub ${DynamoSnapshotBucket.Arn}/*
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
            - Action:
                - "s3:GetBucketLocation"
                - "s3:ListBucket"
              Effect: "Allow"
              Resource: !Sub ${DynamoSnapshotBucket.Arn}
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
            - Action:
                - "s3:GetObject"
              Effect: "Deny"
              Resource: !Sub ${DynamoSnapshotBucket.Arn}/protected/*
              Principal: "*"
              Condition:
                StringNotEquals:
                  s3:ExistingObjectTag/virusScanStatus:
                    - "CLEAN"
                  aws:PrincipalArn: !GetAtt IamRoleLambdaExecution.Arn
            - Action: "s3:PutObject"
              Effect: Deny
              Principal: "*"
              NotResource:
                - !Sub ${DynamoSnapshotBucket.Arn}/*.csv
                - !Sub ${DynamoSnapshotBucket.Arn}/*.json
            - Sid: "AllowSSLRequestsOnly"
              Effect: Deny
              Action: "s3:*"
              Principal: "*"
              Resource:
                - !Sub arn:aws:s3:::${DynamoSnapshotBucket}/*
                - !Sub arn:aws:s3:::${DynamoSnapshotBucket}
              Condition:
                Bool:
                  "aws:SecureTransport": false
    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt AvScanLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceAccount: !Sub ${AWS::AccountId}
        SourceArn: !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}
    ClamDefsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service}-${self:custom.stage}-avscan-${AWS::AccountId}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        AccessControl: Private
    BucketAVScanRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        Policies:
          - PolicyName: "BucketAVScanRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                    - s3:GetObjectTagging
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:PutObjectTagging
                    - s3:PutObjectVersionTagging
                  Resource: !Sub ${AttachmentsBucket.Arn}/*
                - Effect: "Allow"
                  Action:
                    - s3:ListBucket
                  Resource: !Sub ${AttachmentsBucket.Arn}
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                    - s3:GetObjectTagging
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:PutObjectTagging
                    - s3:PutObjectVersionTagging
                  Resource: !Sub ${DynamoSnapshotBucket.Arn}/*
                - Effect: "Allow"
                  Action:
                    - s3:ListBucket
                  Resource: !Sub ${DynamoSnapshotBucket.Arn}
                - Effect: "Allow"
                  Action:
                    - s3:ListBucket
                  Resource: !Sub ${ClamDefsBucket.Arn}
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                    - s3:GetObjectTagging
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:PutObjectTagging
                    - s3:PutObjectVersionTagging
                    - s3:DeleteObject
                    - s3:ListBucket
                  Resource: !Sub ${ClamDefsBucket.Arn}/*
    BucketAVDownloadRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        Policies:
          - PolicyName: "BucketAVDownloadRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                    - s3:GetObjectTagging
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:PutObjectTagging
                    - s3:PutObjectVersionTagging
                    - s3:ListBucket
                  Resource: !Sub ${ClamDefsBucket.Arn}/*
                - Effect: "Allow"
                  Action:
                    - s3:ListBucket
                  Resource: !GetAtt ClamDefsBucket.Arn

  Outputs:
    AttachmentsBucketName: # Print out the name of the bucket that is created
      Value: !Ref AttachmentsBucket
    AttachmentsBucketArn:
      Value: !GetAtt AttachmentsBucket.Arn
    BucketEncryptionKMSKey:
      Value: !GetAtt BucketEncryptionKMSKey.Arn
    DynamoSnapshotBucketName: # Print out the name of the bucket that is created
      Value: !Ref DynamoSnapshotBucket
    DynamoSnapshotBucketArn:
      Value: !GetAtt DynamoSnapshotBucket.Arn
    Region:
      Value: !Sub ${AWS::Region}
