# Refer to the README.md file in within this service directory to configure all ssm parameters required for this service.
service: app-api

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-plugin-typescript
  - serverless-associate-waf
  - "@enterprise-cmcs/serverless-waf-plugin"
  - serverless-offline-ssm
  - serverless-offline
  - serverless-stack-termination-protection
  - serverless-iam-helper
  - serverless-s3-bucket-helper
  - serverless-dotenv-plugin

custom:
  project: "qmr"
  serverless-offline-ssm:
    stages:
      - local
    ssm:
      "/s3bucket/uploads": "local-uploads"
      "/s3bucket/snapshots": "local-dynamo-snapshots"
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.json"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  wafPlugin:
    name: ${self:service}-${self:custom.stage}-webacl-waf
  wafExcludeRules:
    awsCommon:
      - "SizeRestrictions_BODY"
  serverlessTerminationProtection:
    stages:
      - master
      - val
      - prod
  dotenv:
    path: ../../.env
  docraptorApiKey: ${env:docraptorApiKey, ssm:/${self:custom.stage}/pdf/docraptorApiKey, ssm:/default/pdf/docraptorApiKey}
  bootstrapBrokerStringTls: ${ssm:/configuration/${self:custom.stage}/qmr/bootstrapBrokerStringTls, ssm:/configuration/default/qmr/bootstrapBrokerStringTls, ''}
  coreSetTableName: ${env:coreSetTableName, param:CoreSetTableName}
  coreSetTableStreamArn: ${env:DYNAMO_TABLE_ARN, param:CoreSetTableStreamArn}
  measureTableName: ${env:measureTableName, param:MeasureTableName}
  measureTable: ${env:measureTable, param:MeasureTable}
  coreSetTable: ${env:coreSetTable, param:CoreSetTable}
  rateTable: ${env:rateTable, param:RateTable}
  measureTableStreamArn: ${env:DYNAMO_TABLE_ARN, param:MeasureTableStreamArn}
  rateTableName: ${env:rateTableName, param:RateTableName}
  rateTableStreamArn: ${env:DYNAMO_TABLE_ARN, param:RateTableStreamArn}
  bannerTableName: ${env:bannerTableName, param:BannerTableName}
  webAclName: ${self:service}-${self:custom.stage}-webacl-waf
  vpcId: ${ssm:/configuration/${self:custom.stage}/vpc/id, ssm:/configuration/default/vpc/id, ''}
  privateSubnets:
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id, ''}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id, ''}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id, ''}
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  tracing:
    apiGateway: true
  logs:
    restApi: true
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action: "execute-api:Invoke"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListShards
            - dynamodb:ListStreams
          Resource:
            - ${self:custom.coreSetTableStreamArn}
            - ${self:custom.measureTableStreamArn}
            - ${self:custom.rateTableStreamArn}
  environment:
    coreSetTableName: ${self:custom.coreSetTableName}
    measureTableName: ${self:custom.measureTableName}
    measureTable: ${self:custom.measureTable}
    coreSetTable: ${self:custom.coreSetTable}
    rateTable: ${self:custom.rateTable}
    rateTableName: ${self:custom.rateTableName}
    bannerTableName: ${self:custom.bannerTableName}
    stage: ${opt:stage, self:provider.stage}
    docraptorApiKey: ${self:custom.docraptorApiKey}

functions:
  migrateExistingCombinedRates:
    handler: handlers/rate/migrateExistingCombinedRates.main
  listMeasures:
    handler: handlers/measures/get.listMeasures
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/measures/list
          method: get
          cors: true
          authorizer: aws_iam
  getReportingYears:
    handler: handlers/measures/get.getReportingYears
    events:
      - http:
          path: coreset/reportingyears
          method: get
          cors: true
          authorizer: aws_iam
  getMeasureListInfo:
    handler: handlers/measures/get.getMeasureListInfo
    events:
      - http:
          path: coreset/measureListInfo
          method: get
          cors: true
          authorizer: aws_iam
  getMeasure:
    handler: handlers/measures/get.getMeasure
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/measures/{measure}/get
          method: get
          cors: true
          authorizer: ""
  createMeasure:
    handler: handlers/measures/create.createMeasure
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/measures/{measure}/create
          method: post
          cors: true
          authorizer: aws_iam
  editMeasure:
    handler: handlers/measures/update.editMeasure
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/measures/{measure}/edit
          method: put
          cors: true
          authorizer: aws_iam
  deleteMeasure:
    handler: handlers/measures/delete.deleteMeasure
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/measures/{measure}/delete
          method: delete
          cors: true
          authorizer: aws_iam
  getAllCoreSets:
    handler: handlers/coreSets/get.coreSetList
    events:
      - http:
          path: coreset/{state}/{year}/list
          method: get
          cors: true
          authorizer: aws_iam
  getCoreSet:
    handler: handlers/coreSets/get.getCoreSet
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/get
          method: get
          cors: true
          authorizer: aws_iam
  createCoreSet:
    handler: handlers/coreSets/create.createCoreSet
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/create
          method: post
          cors: true
          authorizer: aws_iam
  editCoreSet:
    handler: handlers/coreSets/update.editCoreSet
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/edit
          method: put
          cors: true
          authorizer: aws_iam
  deleteCoreSet:
    handler: handlers/coreSets/delete.deleteCoreSet
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/delete
          method: delete
          cors: true
          authorizer: aws_iam
  getRate:
    handler: handlers/rate/get.getRate
    events:
      - http:
          path: rate/{state}/{year}/{coreSet}/{measure}/get
          method: get
          cors: true
          authorizer: aws_iam
  fetchBanner:
    handler: handlers/banners/fetch.fetchBanner
    events:
      - http:
          path: banners/{bannerId}
          method: get
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                bannerId: true
  createBanner:
    handler: handlers/banners/create.createBanner
    events:
      - http:
          path: banners/{bannerId}
          method: post
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                bannerId: true
  deleteBanner:
    handler: handlers/banners/delete.deleteBanner
    events:
      - http:
          path: banners/{bannerId}
          method: delete
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                bannerId: true
  getPDF:
    handler: handlers/prince/pdf.getPDF
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/getPDF
          method: post
          cors: true
    timeout: 60
  postKafkaData:
    handler: handlers/kafka/post/postKafkaData.handler
    events:
      - stream:
          type: dynamodb
          arn: ${self:custom.measureTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.coreSetTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.rateTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
resources:
  Resources:
    KafkaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for streaming functions.  Egress all is set by default.
        VpcId: ${self:custom.vpcId}
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
