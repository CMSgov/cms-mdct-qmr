# Refer to the README.md file in within this service directory to configure all ssm parameters required for this service.
service: app-api
useDotenv: true

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-warmup
  - serverless-associate-waf
  - "@enterprise-cmcs/serverless-waf-plugin"
  - serverless-offline-ssm
  - serverless-offline
  - serverless-stack-termination-protection
  - serverless-idempotency-helper
  - serverless-iam-helper
  - serverless-s3-bucket-helper
  - serverless-api-client-certificate
  - serverless-dotenv-plugin

custom:
  serverless-offline-ssm:
    stages:
      - local
    ssm:
      "/s3bucket/uploads": "local-uploads"
      "/s3bucket/snapshots": "local-dynamo-snapshots"
  serverlessApiClientCertificate:
    rotateCerts: true
    daysLeft: 30
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.json"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  wafPlugin:
    name: ${self:service}-${self:custom.stage}-webacl-waf
  serverlessTerminationProtection:
    stages:
      - master
      - val
      - prod
  dotenv:
    path: ../../.env
  princeUrl: ${ssm:/configuration/default/princeurl, "https://macpro-platform-dev.cms.gov/doc-conv/508html-to-508pdf"}
  bootstrapBrokerStringTls: ${ssm:/configuration/${self:custom.stage}/qmr/bootstrapBrokerStringTls, ssm:/configuration/default/qmr/bootstrapBrokerStringTls, ''}
  coreSetTableName: ${env:coreSetTableName, cf:database-${self:custom.stage}.CoreSetTableName}
  coreSetTableArn: ${env:DYNAMO_TABLE_ARN, cf:database-${self:custom.stage}.CoreSetTableArn}
  coreSetTableStreamArn: ${env:DYNAMO_TABLE_ARN, cf:database-${self:custom.stage}.CoreSetTableStreamArn}
  measureTableName: ${env:measureTableName, cf:database-${self:custom.stage}.MeasureTableName}
  measureTableArn: ${env:DYNAMO_TABLE_ARN, cf:database-${self:custom.stage}.MeasureTableArn}
  measureTableStreamArn: ${env:DYNAMO_TABLE_ARN, cf:database-${self:custom.stage}.MeasureTableStreamArn}
  bannerTableName: ${env:bannerTableName, cf:database-${self:custom.stage}.BannerTableName}
  bannerTableArn: ${env:DYNAMO_TABLE_ARN, cf:database-${self:custom.stage}.BannerTableArn}
  webAclName: ${self:service}-${self:custom.stage}-webacl
  vpcId: ${ssm:/configuration/${self:custom.stage}/vpc/id, ssm:/configuration/default/vpc/id, ''}
  privateSubnets:
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id, ''}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id, ''}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id, ''}
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  warmup:
    default:
      enabled: true
      prewarm: true
      events:
        - schedule: rate(${ssm:/configuration/${self:custom.stage}/warmup/schedule, ssm:/configuration/default/warmup/schedule, "60 minutes"})
      concurrency: ${ssm:/configuration/${self:custom.stage}/warmup/concurrency, ssm:/configuration/default/warmup/concurrency, 5}
  authValue:
    master: aws_iam
    val: aws_iam
    prod: aws_iam
provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  tracing:
    apiGateway: true
  logs:
    restApi: true
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action: "execute-api:Invoke"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListShards
            - dynamodb:ListStreams
          Resource:
            - ${self:custom.coreSetTableStreamArn}
            - ${self:custom.measureTableStreamArn}
  environment:
    coreSetTableName: ${self:custom.coreSetTableName}
    measureTableName: ${self:custom.measureTableName}
    bannerTableName: ${self:custom.bannerTableName}
    uploadS3BucketName: ${ssm:/s3bucket/uploads, cf:uploads-${self:custom.stage}.AttachmentsBucketName, "local-uploads"}
    dynamoSnapshotS3BucketName: ${ssm:/s3bucket/snapshots, cf:uploads-${self:custom.stage}.DynamoSnapshotBucketName, "local-dynamo-snapshots"}
    stage: ${opt:stage, self:provider.stage}
    princeUrl: ${self:custom.princeUrl}

functions:
  listMeasures:
    handler: handlers/measures/get.listMeasures
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/measures/list
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  getReportingYears:
    handler: handlers/measures/get.getReportingYears
    events:
      - http:
          path: coreset/reportingyears
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  getMeasureListInfo:
    handler: handlers/measures/get.getMeasureListInfo
    events:
      - http:
          path: coreset/measureListInfo
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  getMeasure:
    handler: handlers/measures/get.getMeasure
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/measures/{measure}/get
          method: get
          cors: true
          authorizer: ""
  createMeasure:
    handler: handlers/measures/create.createMeasure
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/measures/{measure}/create
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  editMeasure:
    handler: handlers/measures/update.editMeasure
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/measures/{measure}/edit
          method: put
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  deleteMeasure:
    handler: handlers/measures/delete.deleteMeasure
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/measures/{measure}/delete
          method: delete
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  getAllCoreSets:
    handler: handlers/coreSets/get.coreSetList
    events:
      - http:
          path: coreset/{state}/{year}/list
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  getCoreSet:
    handler: handlers/coreSets/get.getCoreSet
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/get
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  createCoreSet:
    handler: handlers/coreSets/create.createCoreSet
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/create
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  editCoreSet:
    handler: handlers/coreSets/update.editCoreSet
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/edit
          method: put
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  deleteCoreSet:
    handler: handlers/coreSets/delete.deleteCoreSet
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/delete
          method: delete
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  fetchBanner:
    handler: handlers/banners/fetch.fetchBanner
    events:
      - http:
          path: banners/{bannerId}
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                bannerId: true
  createBanner:
    handler: handlers/banners/create.createBanner
    events:
      - http:
          path: banners/{bannerId}
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                bannerId: true
  deleteBanner:
    handler: handlers/banners/delete.deleteBanner
    events:
      - http:
          path: banners/{bannerId}
          method: delete
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                bannerId: true
  getPDF:
    handler: handlers/prince/pdf.getPDF
    events:
      - http:
          path: coreset/{state}/{year}/{coreSet}/getPDF
          method: post
          cors: true
    timeout: 60
  ForceKafkaSync:
    handler: handlers/kafka/get/forceKafkaSync.main
    timeout: 900
    memorySize: 3072
  postKafkaData:
    handler: handlers/kafka/post/postKafkaData.handler
    events:
      - stream:
          type: dynamodb
          arn: ${self:custom.measureTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.coreSetTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
resources:
  Resources:
    KafkaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for streaming functions.  Egress all is set by default.
        VpcId: ${self:custom.vpcId}
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    # ApiGwWebAcl:
    #   Type: AWS::WAFv2::WebACL
    #   Properties:
    #     Name: ${self:custom.webAclName}
    #     DefaultAction:
    #       Block: {}
    #     Rules:
    #       - Action:
    #           Allow: {}
    #         Name: ${self:custom.webAclName}-allow-usa-plus-territories
    #         Priority: 0
    #         Statement:
    #           GeoMatchStatement:
    #             CountryCodes:
    #               - GU # Guam
    #               - PR # Puerto Rico
    #               - US # USA
    #               - UM # US Minor Outlying Islands
    #               - VI # US Virgin Islands
    #               - MP # Northern Mariana Islands
    #         VisibilityConfig:
    #           SampledRequestsEnabled: true
    #           CloudWatchMetricsEnabled: true
    #           MetricName: WafWebAcl
    #     Scope: REGIONAL
    #     VisibilityConfig:
    #       CloudWatchMetricsEnabled: true
    #       SampledRequestsEnabled: true
    #       MetricName: ${self:custom.stage}-webacl
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
